#!/usr/bin/env bash

PARAMS=""
domain=techg

function batch() {
    while read host ;do
        fqdn="$host.$domain"
        printf '\n## Generating %s\n' $fqdn
        if [[ "$host" != ""  && -z $1 ]]; then
            ./easyrsa --batch build-client-full $fqdn nopass
        fi
    done < hosts.txt
}

function cleanup() {
    for i in pki/certs_by_serial/*; do
        file=$(basename "$i")
        name="${file%.*}"
        ext="${file##*.}"
        if grep -q "$name" pki/index.txt; then
            echo "$name Found"
        else
            echo "$name NOT found...Deleting"
            rm -v $i
        fi
    done
}

function client() {
    hostname="$1"
    if [[ -z "$hostname" ]]; then
        echo "Usage: client <hostname>"
        return
    fi
    fqdn="$hostname.$domain"
   ./easyrsa build-client-full $fqdn nopass
}

function confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

function delete() {
    hostname="$1"
    if [[ -z "$hostname" ]]; then
        echo "You must supply a hostname"
        return
    fi
    fqdn="$hostname.$domain"
    rm -v pki/private/$fqdn.key
    rm -v pki/issued/$fqdn.crt
    rm -v pki/reqs/$fqdn.req
    sed -i.bak "/\/CN=$fqdn/d;w /dev/stdout" pki/index.txt
    cleanup
}

function gather() {
    ./gather
}

function init() {
    if [[ confirm ]]; then
        ./easyrsa --batch init-pki
        ./easyrsa build-ca nopass
        ./easyrsa gen-dh
    fi

}
function server() {
    hostname="$1"
    if [[ -z "$hostname" ]]; then
        echo "Usage: server <hostname>"
        return
    fi
    fqdn="$hostname.$domain"
    echo $fqdn
   ./easyrsa build-server-full $fqdn nopass
}

function print_help()
{
	printf 'Usage: [--domain <arg>] [-h|--help] <command> <hostname> \n'
    printf 'batch             | Batch create client certificates listed in hosts.txt\n'
    printf 'cleanup           | Cleanup folders\n'
    printf 'client <hostname> | Generate new client certificate\n'
    printf 'gather            | Gather generated certificates into certs folder and combine into pem\n'
    printf 'init              | Reset easyrsa\n'
    printf 'server <hostname> | Generate new server certificate\n\n'
}

if [[ $# -eq 0 ]]; then
    print_help
fi

# Process args
while (( "$#" )); do
    case "$1" in
        -d|--domain)
            domain=$2
            shift 2
            ;;
        --) # end argument parsing
            shift
            break
            ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

# Process Commands
while (( "$#" )); do
    echo $@
    case "$1" in
        "batch")
            batch;shift;;
        "cleanup")
            cleanup;shift;;
        "client")
            [[ -z $2 ]] && shift
            hostname=$2
            client $hostname
            shift 2
            ;;
        "delete")
            [[ -z $2 ]] && shift
            hostname=$2
            delete $hostname
            shift 2
            ;;
        "gather")
            gather;shift;;
        "init")
            init;shift;;
        "server")
            [[ -z $2 ]] && shift
            hostname=$2
            server $hostname
            shift 2
            ;;
        *)
            print_help;shift;;
    esac
done
