#!/bin/bash

var_help="Easy-RSA wrapper for quicker commands"

# Created by argbash-init v2.6.1
# ARG_OPTIONAL_SINGLE([domain],[],[Base domain name],[techg])
# ARG_POSITIONAL_SINGLE([command],[Command to run])
# ARG_POSITIONAL_INF([options],[Command options],[0])
# ARG_DEFAULTS_POS([])
# ARG_HELP([$var_help])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
_arg_command=
_arg_options=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_domain="techg"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "$var_help"
	printf 'Usage: %s [--domain <arg>] [-h|--help] <command> [<options-1>] ... [<options-n>] ...\n' "$0"
	printf '\t%s\n' "<command>: Command to run"
	printf '\t%s\n' "<options>: Command options"
	printf '\t%s\n' "--domain: Base domain name (default: 'techg')"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --domain value, so we watch for --domain.
			# Since we know that we got the long option,
			# we just reach out for the next argument to get the value.
			--domain)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_domain="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --domain=value, so we watch for --domain=*
			# For whatever we get, we strip '--domain=' using the ${var##--domain=} notation
			# to get the argument value
			--domain=*)
				_arg_domain="${_key##--domain=}"
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'command'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
# We accept up to inifinitely many positional values, so
# there is no need to check for spurious positional arguments.
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_command "
	# If we allow up to infinitely many args, we calculate how many of values
	# were actually passed, and we extend the target array accordingly.
	# We also know that we have _pos_names_count known positional arguments.
	_our_args=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_options[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

confirm() {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

function do_batch() {
    TLD="$_arg_domain"
    if [[ -z "$TLD" ]]; then
        echo "You must supply a domain name"
        return
    fi
    while read host ;do
        fqdn="$host.$TLD"
        echo "Generating $fqdn"
        if [[ "$host" != ""  && -z $1 ]]; then
            ./easyrsa --batch build-server-full $fqdn nopass
        fi
    done < hosts.txt
}

function do_delete() {
    hostname="${_arg_options}"
    if [[ -z "$hostname" ]]; then
        echo "You must supply a hostname"
        return
    fi
    fqdn="$hostname.$_arg_domain"
    rm -v pki/private/$fqdn.key
    rm -v pki/issued/$fqdn.crt
    rm -v pki/reqs/$fqdn.req
    sed -i.bak "/\/CN=$fqdn/d;w /dev/stdout" pki/index.txt
    do_cleanup
}

function do_cleanup() {
    for i in pki/certs_by_serial/*; do
        file=$(basename "$i")
        name="${file%.*}"
        ext="${file##*.}"
        if grep -q "$name" pki/index.txt; then
            echo "$name Found"
        else
            echo "$name NOT found...Deleting"
            rm -v $i
        fi
    done
}

function do_client() {
    hostname="${_arg_options}"
    if [[ -z "$hostname" ]]; then
        echo "Usage: client <hostname>"
        return
    fi
    FQDN="$hostname.$_arg_domain"
   ./easyrsa build-client-full $FQDN nopass
}

function do_gather() {
    ./gather
}

function do_reset() {
    if [[ confirm ]]; then
        ./easyrsa --batch init-pki
        ./easyrsa build-ca nopass
        ./easyrsa gen-dh
    fi
}

function do_server() {
    hostname="${_arg_options}"
    if [[ -z "$hostname" ]]; then
        echo "Usage: server <hostname>"
        return
    fi
    fqdn="$hostname.$_arg_domain"
   ./easyrsa build-client-full $fqdn nopass
}

function do_debug() {
    echo "$_arg_command"
    echo "$_arg_options"
    for i in ${_arg_options[*]}; do
        echo "$i"
    done
}

function do_wildcard() {
    DOMAIN="$_arg_domain"
    CERT_FILENAME="wildcard.${DOMAIN}"
    CERT_COMMONNAME="*.${DOMAIN}"

    ./easyrsa --batch --req-cn="${CERT_COMMONNAME}" gen-req ${CERT_FILENAME} nopass
    ./easyrsa --batch sign-req server ${CERT_FILENAME}
}

case "$_arg_command" in
    "batch"    ) do_batch;;
    "cleanup"  ) do_cleanup;;
    "client"   ) do_client;;
    "delete"   ) do_delete;;
    "gather"   ) do_gather;;
    "reset"    ) do_reset;;
    "server"   ) do_server;;
    "debug"    ) do_debug;;
    "wildcard" ) do_wildcard;;
             * ) print_help;;
esac

# ] <-- needed because of Argbash
